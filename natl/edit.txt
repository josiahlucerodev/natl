		//basic_sin
		constexpr inline static simd_register_f32 basic_sin_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicSinF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_sin_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicSinF64(value[i]);
			}
			return output;
		}

		//mmasked basic_sin
		constexpr inline static simd_register_f32 mmasked_basic_sin_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicSinF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_sin_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicSinF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_sin
		constexpr inline static simd_register_f32 mmasked_src_basic_sin_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicSinF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_sin_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicSinF64(value[i]);
				}
			}
			return output;
		}

		//sin
		constexpr inline static simd_register_f32 sin_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::sinF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 sin_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::sinF64(value[i]);
			}
			return output;
		}

		//mmasked sin
		constexpr inline static simd_register_f32 mmasked_sin_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::sinF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_sin_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::sinF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src sin
		constexpr inline static simd_register_f32 mmasked_src_sin_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::sinF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_sin_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::sinF64(value[i]);
				}
			}
			return output;
		}

		//basic_cos
		constexpr inline static simd_register_f32 basic_cos_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicCosF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_cos_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicCosF64(value[i]);
			}
			return output;
		}

		//mmasked basic_cos
		constexpr inline static simd_register_f32 mmasked_basic_cos_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicCosF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_cos_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicCosF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_cos
		constexpr inline static simd_register_f32 mmasked_src_basic_cos_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicCosF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_cos_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicCosF64(value[i]);
				}
			}
			return output;
		}

		//cos
		constexpr inline static simd_register_f32 cos_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::cosF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 cos_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::cosF64(value[i]);
			}
			return output;
		}

		//mmasked cos
		constexpr inline static simd_register_f32 mmasked_cos_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::cosF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_cos_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::cosF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src cos
		constexpr inline static simd_register_f32 mmasked_src_cos_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::cosF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_cos_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::cosF64(value[i]);
				}
			}
			return output;
		}

		//basic_tan
		constexpr inline static simd_register_f32 basic_tan_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicTanF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_tan_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicTanF64(value[i]);
			}
			return output;
		}

		//mmasked basic_tan
		constexpr inline static simd_register_f32 mmasked_basic_tan_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicTanF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_tan_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicTanF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_tan
		constexpr inline static simd_register_f32 mmasked_src_basic_tan_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicTanF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_tan_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicTanF64(value[i]);
				}
			}
			return output;
		}

		//tan
		constexpr inline static simd_register_f32 tan_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::tanF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 tan_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::tanF64(value[i]);
			}
			return output;
		}

		//mmasked tan
		constexpr inline static simd_register_f32 mmasked_tan_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::tanF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_tan_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::tanF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src tan
		constexpr inline static simd_register_f32 mmasked_src_tan_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::tanF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_tan_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::tanF64(value[i]);
				}
			}
			return output;
		}

		//basic_asin
		constexpr inline static simd_register_f32 basic_asin_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicAsinF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_asin_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicAsinF64(value[i]);
			}
			return output;
		}

		//mmasked basic_asin
		constexpr inline static simd_register_f32 mmasked_basic_asin_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAsinF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_asin_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAsinF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_asin
		constexpr inline static simd_register_f32 mmasked_src_basic_asin_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAsinF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_asin_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAsinF64(value[i]);
				}
			}
			return output;
		}

		//asin
		constexpr inline static simd_register_f32 asin_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::asinF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 asin_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::asinF64(value[i]);
			}
			return output;
		}

		//mmasked asin
		constexpr inline static simd_register_f32 mmasked_asin_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::asinF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_asin_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::asinF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src asin
		constexpr inline static simd_register_f32 mmasked_src_asin_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::asinF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_asin_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::asinF64(value[i]);
				}
			}
			return output;
		}

		//basic_acos
		constexpr inline static simd_register_f32 basic_acos_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicAcosF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_acos_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicAcosF64(value[i]);
			}
			return output;
		}

		//mmasked basic_acos
		constexpr inline static simd_register_f32 mmasked_basic_acos_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAcosF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_acos_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAcosF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_acos
		constexpr inline static simd_register_f32 mmasked_src_basic_acos_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAcosF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_acos_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAcosF64(value[i]);
				}
			}
			return output;
		}

		//acos
		constexpr inline static simd_register_f32 acos_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::acosF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 acos_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::acosF64(value[i]);
			}
			return output;
		}

		//mmasked acos
		constexpr inline static simd_register_f32 mmasked_acos_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::acosF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_acos_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::acosF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src acos
		constexpr inline static simd_register_f32 mmasked_src_acos_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::acosF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_acos_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::acosF64(value[i]);
				}
			}
			return output;
		}

		//basic_atan
		constexpr inline static simd_register_f32 basic_atan_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicAtanF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_atan_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicAtanF64(value[i]);
			}
			return output;
		}

		//mmasked basic_atan
		constexpr inline static simd_register_f32 mmasked_basic_atan_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAtanF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_atan_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAtanF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_atan
		constexpr inline static simd_register_f32 mmasked_src_basic_atan_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAtanF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_atan_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAtanF64(value[i]);
				}
			}
			return output;
		}

		//atan
		constexpr inline static simd_register_f32 atan_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::atanF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 atan_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::atanF64(value[i]);
			}
			return output;
		}

		//mmasked atan
		constexpr inline static simd_register_f32 mmasked_atan_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::atanF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_atan_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::atanF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src atan
		constexpr inline static simd_register_f32 mmasked_src_atan_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::atanF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_atan_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::atanF64(value[i]);
				}
			}
			return output;
		}

		//basic_sinh
		constexpr inline static simd_register_f32 basic_sinh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicSinhF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_sinh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicSinhF64(value[i]);
			}
			return output;
		}

		//mmasked basic_sinh
		constexpr inline static simd_register_f32 mmasked_basic_sinh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicSinhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_sinh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicSinhF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_sinh
		constexpr inline static simd_register_f32 mmasked_src_basic_sinh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicSinhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_sinh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicSinhF64(value[i]);
				}
			}
			return output;
		}

		//sinh
		constexpr inline static simd_register_f32 sinh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::sinhF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 sinh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::sinhF64(value[i]);
			}
			return output;
		}

		//mmasked sinh
		constexpr inline static simd_register_f32 mmasked_sinh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::sinhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_sinh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::sinhF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src sinh
		constexpr inline static simd_register_f32 mmasked_src_sinh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::sinhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_sinh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::sinhF64(value[i]);
				}
			}
			return output;
		}

		//basic_cosh
		constexpr inline static simd_register_f32 basic_cosh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicCoshF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_cosh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicCoshF64(value[i]);
			}
			return output;
		}

		//mmasked basic_cosh
		constexpr inline static simd_register_f32 mmasked_basic_cosh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicCoshF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_cosh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicCoshF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_cosh
		constexpr inline static simd_register_f32 mmasked_src_basic_cosh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicCoshF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_cosh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicCoshF64(value[i]);
				}
			}
			return output;
		}

		//cosh
		constexpr inline static simd_register_f32 cosh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::coshF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 cosh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::coshF64(value[i]);
			}
			return output;
		}

		//mmasked cosh
		constexpr inline static simd_register_f32 mmasked_cosh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::coshF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_cosh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::coshF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src cosh
		constexpr inline static simd_register_f32 mmasked_src_cosh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::coshF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_cosh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::coshF64(value[i]);
				}
			}
			return output;
		}

		//basic_tanh
		constexpr inline static simd_register_f32 basic_tanh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicTanhF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_tanh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicTanhF64(value[i]);
			}
			return output;
		}

		//mmasked basic_tanh
		constexpr inline static simd_register_f32 mmasked_basic_tanh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicTanhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_tanh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicTanhF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_tanh
		constexpr inline static simd_register_f32 mmasked_src_basic_tanh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicTanhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_tanh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicTanhF64(value[i]);
				}
			}
			return output;
		}

		//tanh
		constexpr inline static simd_register_f32 tanh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::tanhF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 tanh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::tanhF64(value[i]);
			}
			return output;
		}

		//mmasked tanh
		constexpr inline static simd_register_f32 mmasked_tanh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::tanhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_tanh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::tanhF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src tanh
		constexpr inline static simd_register_f32 mmasked_src_tanh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::tanhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_tanh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::tanhF64(value[i]);
				}
			}
			return output;
		}

		//basic_asinh
		constexpr inline static simd_register_f32 basic_asinh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicAsinhF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_asinh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicAsinhF64(value[i]);
			}
			return output;
		}

		//mmasked basic_asinh
		constexpr inline static simd_register_f32 mmasked_basic_asinh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAsinhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_asinh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAsinhF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_asinh
		constexpr inline static simd_register_f32 mmasked_src_basic_asinh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAsinhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_asinh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAsinhF64(value[i]);
				}
			}
			return output;
		}

		//asinh
		constexpr inline static simd_register_f32 asinh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::asinhF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 asinh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::asinhF64(value[i]);
			}
			return output;
		}

		//mmasked asinh
		constexpr inline static simd_register_f32 mmasked_asinh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::asinhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_asinh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::asinhF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src asinh
		constexpr inline static simd_register_f32 mmasked_src_asinh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::asinhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_asinh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::asinhF64(value[i]);
				}
			}
			return output;
		}

		//basic_acosh
		constexpr inline static simd_register_f32 basic_acosh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicAcoshF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_acosh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicAcoshF64(value[i]);
			}
			return output;
		}

		//mmasked basic_acosh
		constexpr inline static simd_register_f32 mmasked_basic_acosh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAcoshF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_acosh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAcoshF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_acosh
		constexpr inline static simd_register_f32 mmasked_src_basic_acosh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAcoshF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_acosh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAcoshF64(value[i]);
				}
			}
			return output;
		}

		//acosh
		constexpr inline static simd_register_f32 acosh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::acoshF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 acosh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::acoshF64(value[i]);
			}
			return output;
		}

		//mmasked acosh
		constexpr inline static simd_register_f32 mmasked_acosh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::acoshF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_acosh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::acoshF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src acosh
		constexpr inline static simd_register_f32 mmasked_src_acosh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::acoshF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_acosh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::acoshF64(value[i]);
				}
			}
			return output;
		}

		//basic_atanh
		constexpr inline static simd_register_f32 basic_atanh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::basicAtanhF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 basic_atanh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::basicAtanhF64(value[i]);
			}
			return output;
		}

		//mmasked basic_atanh
		constexpr inline static simd_register_f32 mmasked_basic_atanh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAtanhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_basic_atanh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAtanhF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src basic_atanh
		constexpr inline static simd_register_f32 mmasked_src_basic_atanh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAtanhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_basic_atanh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::basicAtanhF64(value[i]);
				}
			}
			return output;
		}

		//atanh
		constexpr inline static simd_register_f32 atanh_f32(simd_register_f32 value) noexcept {
			simd_register_f32 output;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				output[i] = math::atanhF32(value[i]);
			}
			return output;
		}
		constexpr inline static simd_register_f64 atanh_f64(simd_register_f64 value) noexcept {
			simd_register_f64 output;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				output[i] = math::atanhF64(value[i]);
			}
			return output;
		}

		//mmasked atanh
		constexpr inline static simd_register_f32 mmasked_atanh_f32(simd_register_f32 value, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = value;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::atanhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_atanh_f64(simd_register_f64 value, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = value;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::atanhF64(value[i]);
				}
			}
			return output;
		}

		//mmasked src atanh
		constexpr inline static simd_register_f32 mmasked_src_atanh_f32(simd_register_f32 value, simd_register_f32 src, simd_mmask_f32 mmask) noexcept {
			simd_register_f32 output = src;
			for (Size i = 0; i < SimdRegisterF32Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::atanhF32(value[i]);
				}
			}
			return output;
		}
		constexpr inline static simd_register_f64 mmasked_src_atanh_f64(simd_register_f64 value, simd_register_f64 src, simd_mmask_f64 mmask) noexcept {
			simd_register_f64 output = src;
			for (Size i = 0; i < SimdRegisterF64Info<simd_arch>::count(); i++) {
				if (mmask[i]) {
					output[i] = math::atanhF64(value[i]);
				}
			}
			return output;
		}