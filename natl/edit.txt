/*
	template<
		typename DynamicArrayType,
		typename Key, typename DataType,
		typename Hash = Hash<Key>,
		typename Compare = FlatMapHashCompare<Key>,
		typename Alloc = DefaultAllocatorByte>
	class BaseFlatHashMap {
	public:
		using key_type = Key;
		using map_type = DataType;
		using key_value_pair = KeyValuePair<const key_type, map_type>;
		using type = Option<key_value_pair>;

		using allocator_type = Alloc::template rebind_alloc<key_value_pair>;
		using allocator_type = Alloc::template rebind_alloc<type>;

		using iterator = FlatHashMapIterator<type, allocator_type>;
		using const_iterator = FlatHashMapIterator<const type, allocator_type>;
		using reverse_iterator = ReverseIterator<FlatHashMapIterator<type, allocator_type>>;
		using const_reverse_iterator = ReverseIterator<FlatHashMapIterator<const type, allocator_type>>;

		using key_value_traits = DefaultIteratorTraits<key_value_pair>;

		using mapped_type = key_value_traits::mapped_type;
		using reference = key_value_traits::reference;
		using const_reference = key_value_traits::const_reference;
		using pointer = key_value_traits::pointer;
		using const_pointer = key_value_traits::const_pointer;
		using difference_type = key_value_traits::difference_type;
		using size_type = key_value_traits::size_type;

		using optional_pointer = Option<pointer>;
		using optional_const_pointer = Option<const_pointer>;

		using mapped_type = typename allocator_type::mapped_type;
		using reference = typename allocator_type::reference;
		using const_reference = typename allocator_type::const_reference;
		using pointer = typename allocator_type::pointer;
		using const_pointer = typename allocator_type::const_pointer;
		using difference_type = typename allocator_type::difference_type;
		using size_type = typename allocator_type::size_type;

		static constexpr f64 load_factor = 0.7;
	private:
		size_type internalSize;
		DynamicArrayType table;
	public:
		//constructor
		constexpr BaseFlatHashMap() noexcept : internalSize(0), table() {}
		constexpr BaseFlatHashMap(const BaseFlatHashMap& other) noexcept
			: internalSize(other.internalSize), table(other.table) {}
		constexpr BaseFlatHashMap(BaseFlatHashMap&& other) noexcept
			: internalSize(other.internalSize), table(natl::move(other.table)) {}

		//destructor
		constexpr ~BaseFlatHashMap() noexcept = default;

		//util
		constexpr BaseFlatHashMap& self() noexcept { return *this; }
		constexpr const BaseFlatHashMap& self() const noexcept { return *this; }

		//assignment
		constexpr BaseFlatHashMap& operator=(const BaseFlatHashMap& other) noexcept {
			internalSize = other.internalSize;
			table = other.table;
			return self();
		}

		constexpr BaseFlatHashMap& operator=(BaseFlatHashMap&& other) noexcept {
			internalSize = other.internalSize;
			table = natl::move(other.table);
			return self();
		}

		//capacity
		constexpr size_type size() const noexcept { return internalSize; }
		constexpr size_type count() const noexcept { return internalSize; }
		constexpr size_type capacity() const noexcept { return table.size(); }
		constexpr Bool isEmpty() const noexcept { return !Bool(size()); }
		constexpr Bool isNotEmpty() const noexcept { return Bool(size()); }
		explicit constexpr operator Bool() const noexcept { return isNotEmpty(); }

		//iterators
	private:
		constexpr pointer beginPtr() noexcept { return table.data(); }
		constexpr const_pointer beginPtr() const noexcept { return table.data(); }
		constexpr pointer endPtr() noexcept { return table.data() + table.size(); }
		constexpr const_pointer endPtr() const noexcept { return table.data() + table.size(); }

	public:
		constexpr iterator begin() noexcept {
			pointer dataPtr = beginPtr();
			iterator firstIter = iterator(dataPtr, beginPtr(), endPtr());
			if (dataPtr->hasValue()) {
				return firstIter;
			} else {
				return ++firstIter;
			}
		}
		constexpr const_iterator begin() const noexcept {
			const_pointer dataPtr = beginPtr();
			const_iterator firstIter = const_iterator(dataPtr, beginPtr(), endPtr());
			if (dataPtr->hasValue()) {
				return firstIter;
			} else {
				return ++firstIter;
			}
		}
		constexpr const_iterator cbegin() const noexcept {
			return begin();
		}

		constexpr iterator end() noexcept { return iterator(endPtr(), beginPtr(), endPtr()); }
		constexpr const_iterator end() const noexcept { return const_iterator(endPtr(), beginPtr(), endPtr()); }
		constexpr const_iterator cend() const noexcept { return const_iterator(endPtr(), beginPtr(), endPtr()); }

		constexpr reverse_iterator rbegin() noexcept {
			pointer dataPtr = endPtr();
			reverse_iterator firstIter = reverse_iterator(dataPtr, beginPtr(), endPtr());
			if (dataPtr->hasValue()) {
				return firstIter;
			} else {
				return ++firstIter;
			}
		}
		constexpr const_reverse_iterator rbegin() const noexcept {
			const_pointer dataPtr = endPtr();
			const_reverse_iterator firstIter = const_reverse_iterator(dataPtr, beginPtr(), endPtr());
			if (dataPtr->hasValue()) {
				return firstIter;
			} else {
				return ++firstIter;
			}
		}
		constexpr const_reverse_iterator crbegin() const noexcept {
			return rbegin();
		}

		constexpr reverse_iterator rend() noexcept { return reverse_iterator(beginPtr(), beginPtr(), endPtr()); }
		constexpr const_reverse_iterator rend() const noexcept { return const_reverse_iterator(beginPtr(), beginPtr(), endPtr()); }
		constexpr const_reverse_iterator crend() const noexcept { return const_reverse_iterator(beginPtr(), beginPtr(), endPtr()); }

	public:
		//modifiers
		constexpr void clear() noexcept {
			table.clear();
			internalSize = 0;
		}
		constexpr void reserve(const size_type& newCapacity) noexcept {
			resizeAndRehash(newCapacity);
		}

		constexpr iterator insert(const Key& key, const DataType& value) noexcept {
			resizeAndRehash();

			pointer dataLocation = nullptr;
			size_type index = Hash::hash(key) % capacity();
			while (table[index].hasValue()) {
				if (Compare::compare(table[index].value().key, key)) {
					dataLocation = &table[index];
					dataLocation->value().value = value;
					return iterator(dataLocation, beginPtr(), endPtr());
				}
				index = (index + 1) % capacity();
			}

			dataLocation = &table[index];
			dataLocation->construct(key, value);
			++internalSize;

			return iterator(dataLocation, beginPtr(), endPtr());
		};

		constexpr iterator insert(Key&& key, DataType&& value) noexcept {
			resizeAndRehash();

			pointer dataLocation = nullptr;
			size_type index = Hash::hash(key) % capacity();
			while (table[index].hasValue()) {
				if (Compare::compare(table[index].value().key, key)) {
					dataLocation = &table[index];
					dataLocation->value().value = natl::forward<DataType>(value);
					return iterator(dataLocation, beginPtr(), endPtr());
				}
				index = (index + 1) % capacity();
			}

			dataLocation = &table[index];
			dataLocation->construct(natl::forward<Key>(key), natl::forward<DataType>(value));
			++internalSize;

			return iterator(dataLocation, beginPtr(), endPtr());
		};

		constexpr Bool erase(const Key& key) noexcept {
			iterator location = findIterator(key);
			if (location != end()) {
				internalSize -= 1;
				location.dataPtr->deconstruct();
				return true;
			} else {
				return false;
			}
		}

		//lookups
		constexpr iterator findIterator(const Key& key) noexcept {
			if (size() == 0) { return end(); }
			size_type index = Hash::hash(key) % capacity();
			size_type originalIndex = index;

			while (true) {
				if (table[index].hasValue() && Compare::compare(table[index].value().key, key)) {
					return iterator(&table[index], beginPtr(), endPtr());
				}

				index = (index + 1) % capacity();
				if (index == originalIndex) {
					break;
				}
			}
			return end();
		}

		constexpr const_iterator findIterator(const Key& key) const noexcept {
			if (size() == 0) { return end(); }
			size_type index = Hash::hash(key) % capacity();
			size_type originalIndex = index;

			while (true) {
				if (Compare::compare(table[index].value().key, key)) {
					return const_iterator(&table[index], beginPtr(), endPtr());
				}

				index = (index + 1) % capacity();
				if (index == originalIndex) {
					break;
				}
			}
			return end();
		}

		constexpr optional_pointer find(const Key& key) noexcept {
			if (size() == 0) { return optional_pointer(natl::OptionEmpty()); }
			size_type index = Hash::hash(key) % capacity();
			size_type originalIndex = index;

			while (true) {
				if (table[index].hasValue() && Compare::compare(table[index].value().key, key)) {
					return optional_pointer(table[index].valueAsPtr());
				}

				index = (index + 1) % capacity();
				if (index == originalIndex) {
					break;
				}
			}
			return optional_pointer(natl::OptionEmpty());
		}

		constexpr optional_const_pointer find(const Key& key) const noexcept {
			if (size() == 0) { return optional_const_pointer(natl::OptionEmpty()); }
			size_type index = Hash::hash(key) % capacity();
			size_type originalIndex = index;

			while (true) {
				if (table[index].hasValue() && Compare::compare(table[index].value().key, key)) {
					return optional_const_pointer(table[index].valueAsPtr());
				}

				index = (index + 1) % capacity();
				if (index == originalIndex) {
					break;
				}
			}
			return optional_const_pointer();
		}

		Bool contains(const Key& key) const noexcept {
			return find(key).hasValue();
		}
	private:
		constexpr void resizeAndRehash() noexcept {
			 if (internalSize >= static_cast<size_type>(static_cast<f64>(capacity()) * load_factor)) {
				if (internalSize < static_cast<size_type>(static_cast<f64>(table.capacity()) * load_factor)) {
					table.resize(table.capacity());
					return;
				}

				resizeAndRehash((capacity() + 10) * 2);
			}
		}
		constexpr void resizeAndRehash(const size_type newCapacity) noexcept {
			if (newCapacity <= capacity()) { return; }

			DynamicArrayType newTable(newCapacity);
			for (type& entry : table) {
				if (entry.hasValue()) {
					size_type index = Hash::hash(entry.value().key) % newCapacity;

					while (newTable[index].hasValue()) {
						index = (index + 1) % newCapacity;
					}

					newTable[index] = natl::forward<type>(entry);
				}
			}
			table = natl::move(newTable);
		}
	};

	template<typename DynamicArrayType, typename Key, typename DataType, typename Hash, typename Compare, typename Alloc>
	struct IsTriviallyCompareableV<BaseFlatHashMap<DynamicArrayType, Key, DataType, Hash, Compare, Alloc>>
		: FalseType {};

	template<typename DynamicArrayType, typename Key, typename DataType, typename Hash, typename Compare, typename Alloc>
	struct IsTriviallyRelocatableV<BaseFlatHashMap<DynamicArrayType, Key, DataType, Hash, Compare, Alloc>>
		: TrueType {};
	template<typename DynamicArrayType, typename Key, typename DataType, typename Hash, typename Compare, typename Alloc>
	struct IsTriviallyConstructibleV<BaseFlatHashMap<DynamicArrayType, Key, DataType, Hash, Compare, Alloc>>
		: TrueType {};
	template<typename DynamicArrayType, typename Key, typename DataType, typename Hash, typename Compare, typename Alloc>
	struct IsTriviallyDestructibleV<BaseFlatHashMap<DynamicArrayType, Key, DataType, Hash, Compare, Alloc>>
		: FalseType {};

	template<typename DynamicArrayType, typename Key, typename DataType, typename Hash, typename Compare, typename Alloc>
	struct IsTriviallyConstRefConstructibleV<BaseFlatHashMap<DynamicArrayType, Key, DataType, Hash, Compare, Alloc>>
		: FalseType {};
	template<typename DynamicArrayType, typename Key, typename DataType, typename Hash, typename Compare, typename Alloc>
	struct IsTriviallyMoveConstructibleV<BaseFlatHashMap<DynamicArrayType, Key, DataType, Hash, Compare, Alloc>>
		: FalseType {};

	template<typename DynamicArrayType, typename Key, typename DataType, typename Hash, typename Compare, typename Alloc>
	struct IsTriviallyConstRefAssignableV<BaseFlatHashMap<DynamicArrayType, Key, DataType, Hash, Compare, Alloc>>
		: FalseType {};
	template<typename DynamicArrayType, typename Key, typename DataType, typename Hash, typename Compare, typename Alloc>
	struct IsTriviallyMoveAssignableV<BaseFlatHashMap<DynamicArrayType, Key, DataType, Hash, Compare, Alloc>>
		: FalseType {};

	template<class Key, class DataType,
		class Hash = Hash<Key>,
		class Compare = FlatMapHashCompare<Key>,
		class Alloc = DefaultAllocatorByte>
	using FlatHashMap = BaseFlatHashMap<DynArray<FlatHashMapEntry<const Key, DataType>, typename Alloc::template rebind_alloc<FlatHashMapEntry<const Key, DataType>>>, Key, DataType, Hash, Compare, Alloc>;

	template<class Key, class DataType,
		Size bufferSize,
		class Hash = Hash<Key>,
		class Compare = FlatMapHashCompare<Key>,
		class Alloc = DefaultAllocatorByte>
	using SmallFlatHashMap = BaseFlatHashMap<SmallDynArray<FlatHashMapEntry<const Key, DataType>, bufferSize, typename Alloc::template rebind_alloc<FlatHashMapEntry<const Key, DataType>>>, Key, DataType, Hash, Compare, Alloc>;

	*/