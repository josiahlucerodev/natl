template<class DataType>
	class SharedPtr {
	public:
		using element_type = DataType;
		using element_pointer = DataType*;

		using control_block_seperate = impl::SharedPtrControlBlockSeperate<DataType>;
		using control_block_seperate_polymorphic = impl::SharedPtrControlBlockSeperatePolymorphic;
		using control_block_fused = impl::SharedPtrControlBlockFused<DataType>;
		using control_block_fused_polymorphic = impl::SharedPtrControlBlockFusedPolymorphic;
		using control_block_seperate_polymorphic_constexpr = impl::SharedPtrControlBlockSeperatePolymorphicConstexpr;


		//movement info 
		constexpr static bool triviallyRelocatable = true;
		constexpr static bool triviallyDefaultConstructible = true;
		constexpr static bool triviallyCompareable = false;
		constexpr static bool triviallyDestructible = false;
		constexpr static bool triviallyConstRefConstructedable = false;
		constexpr static bool triviallyMoveConstructedable = false;
	private:
		PackedPtrAndSmallData<element_pointer, impl::SharedPtrControlBlockState> dataPtrAndControlBlockState;
		union {
			control_block_seperate* controlBlockSeperate;
			control_block_fused* controlBlockFused;
			control_block_seperate_polymorphic* controlBlockSeperatePolymorphic;
			control_block_fused_polymorphic* controlBlockFusedPolymorphic;
			control_block_seperate_polymorphic_constexpr* controlBlockSeperatePolymorphicConstexpr;
		};
	public:

		//weak ptr 
		template<class WeakPtrDataType>
		class WeakPtr {
		public:
			using element_type = WeakPtrDataType;
			using element_pointer = WeakPtrDataType*;

			using control_block_seperate = impl::SharedPtrControlBlockSeperate<WeakPtrDataType>;
			using control_block_seperate_polymorphic = impl::SharedPtrControlBlockSeperatePolymorphic;
			using control_block_fused = impl::SharedPtrControlBlockFused<WeakPtrDataType>;
			using control_block_fused_polymorphic = impl::SharedPtrControlBlockFusedPolymorphic;
			using control_block_seperate_polymorphic_constexpr = impl::SharedPtrControlBlockSeperatePolymorphicConstexpr;

			//movement info 
			constexpr static bool triviallyRelocatable = true;
			constexpr static bool triviallyDefaultConstructible = true;
			constexpr static bool triviallyCompareable = false;
			constexpr static bool triviallyDestructible = false;
			constexpr static bool triviallyConstRefConstructedable = false;
			constexpr static bool triviallyMoveConstructedable = false;

		private:
			PackedPtrAndSmallData<element_pointer, impl::SharedPtrControlBlockState> dataPtrAndControlBlockState;
			union {
				control_block_seperate* controlBlockSeperate;
				control_block_fused* controlBlockFused;
				control_block_seperate_polymorphic* controlBlockSeperatePolymorphic;
				control_block_fused_polymorphic* controlBlockFusedPolymorphic;
				control_block_seperate_polymorphic_constexpr* controlBlockSeperatePolymorphicConstexpr;
			};
		public:
			//constructor 
			constexpr WeakPtr() noexcept : controlBlockState(impl::SharedPtrControlBlockState::seperate), dataPtr(nullptr), controlBlockSeperate() {}
			constexpr WeakPtr(std::nullptr_t) noexcept : controlBlockState(impl::SharedPtrControlBlockState::seperate), dataPtr(nullptr), controlBlockSeperate() {}

		private:
			template<class OtherType>
			constexpr void constructCopy(const OtherType& other) noexcept {
				if (other.dataPtr == nullptr) {
					dataPtr = nullptr;
					controlBlockState = impl::SharedPtrControlBlockState::seperate;
					controlBlockSeperate = nullptr;
				} else {
					dataPtr = other.dataPtr;
					controlBlockState = other.controlBlockState;

					switch (other.controlBlockState) {
					case impl::SharedPtrControlBlockState::seperate:
						controlBlockSeperate = other.controlBlockSeperate;
						controlBlockSeperate->weakCount++;
						break;
					case impl::SharedPtrControlBlockState::fused:
						controlBlockFused = other.controlBlockFused;
						controlBlockFused->weakCount++;
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphic:
						controlBlockSeperatePolymorphic = other.controlBlockSeperatePolymorphic;
						controlBlockSeperatePolymorphic->weakRefIncrement(controlBlockSeperatePolymorphic);
						break;
					case impl::SharedPtrControlBlockState::fusedPolymorphic:
						controlBlockFusedPolymorphic = other.controlBlockFusedPolymorphic;
						controlBlockFusedPolymorphic->weakRefIncrement(controlBlockFusedPolymorphic);
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
						if (isConstantEvaluated()) {
							controlBlockSeperatePolymorphicConstexpr = other.controlBlockSeperatePolymorphicConstexpr;
							controlBlockSeperatePolymorphicConstexpr->getWeakRefIncrementFunction()(controlBlockSeperatePolymorphicConstexpr);
						} else {
							unreachable();
						}
						break;
					default:
						unreachable();
					}
				}
			}
			template<class OtherType>
			constexpr void constructMove(OtherType&& other) noexcept {
				if (other.dataPtr == nullptr) {
					dataPtr = nullptr;
					controlBlockState = impl::SharedPtrControlBlockState::seperate;
					controlBlockSeperate = nullptr;
				} else {
					dataPtr = other.dataPtr;
					controlBlockState = other.controlBlockState;

					switch (other.controlBlockState) {
					case impl::SharedPtrControlBlockState::seperate:
						controlBlockSeperate = other.controlBlockSeperate;
						break;
					case impl::SharedPtrControlBlockState::fused:
						controlBlockFused = other.controlBlockFused;
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphic:
						controlBlockSeperatePolymorphic = other.controlBlockSeperatePolymorphic;
						break;
					case impl::SharedPtrControlBlockState::fusedPolymorphic:
						controlBlockFusedPolymorphic = other.controlBlockFusedPolymorphic;
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
						if (isConstantEvaluated()) {
							controlBlockSeperatePolymorphicConstexpr = other.controlBlockSeperatePolymorphicConstexpr;
						} else {
							unreachable();
						}
						break;
					default:
						unreachable();
					}
				}

				other.dataPtr = nullptr;
			}
			template<class OtherType>
			constexpr void constructPolymorphicCopy(const OtherType& other) noexcept {
				if (other.dataPtr == nullptr) {
					dataPtr = nullptr;
					controlBlockState = impl::SharedPtrControlBlockState::seperate;
					controlBlockSeperate = nullptr;
				} else {
					dataPtr = static_cast<WeakPtrDataType*>(other.dataPtr);
					controlBlockState = other.controlBlockState;

					switch (other.controlBlockState) {
					case impl::SharedPtrControlBlockState::seperate:
						controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphic;
						controlBlockSeperatePolymorphic = static_cast<control_block_seperate_polymorphic*>(other.controlBlockSeperate);
						controlBlockSeperatePolymorphic->weakRefIncrement(controlBlockSeperatePolymorphic);
						break;
					case impl::SharedPtrControlBlockState::fused:
						controlBlockState = impl::SharedPtrControlBlockState::fusedPolymorphic;
						controlBlockFusedPolymorphic = static_cast<control_block_fused_polymorphic*>(other.controlBlockFused);
						controlBlockFusedPolymorphic->weakRefIncrement(controlBlockFusedPolymorphic);
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphic:
						controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphic;
						controlBlockSeperatePolymorphic = other.controlBlockSeperatePolymorphic;
						controlBlockSeperatePolymorphic->weakRefIncrement(controlBlockSeperatePolymorphic);
						break;
					case impl::SharedPtrControlBlockState::fusedPolymorphic:
						controlBlockState = impl::SharedPtrControlBlockState::fusedPolymorphic;
						controlBlockFusedPolymorphic = other.controlBlockFusedPolymorphic;
						controlBlockFusedPolymorphic->weakRefIncrement(controlBlockFusedPolymorphic);
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
						if (isConstantEvaluated()) {
							controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr;
							controlBlockSeperatePolymorphicConstexpr = other.controlBlockSeperatePolymorphicConstexpr;
							controlBlockSeperatePolymorphicConstexpr->getWeakRefIncrementFunction()(controlBlockSeperatePolymorphicConstexpr);
						} else {
							unreachable();
						}
						break;
					default:
						unreachable();
					}
				}
			}
			template<class OtherType>
			constexpr void constructPolymorphicMove(const OtherType& other) noexcept {
				if (other.dataPtr == nullptr) {
					dataPtr = nullptr;
					controlBlockState = impl::SharedPtrControlBlockState::seperate;
					controlBlockSeperate = nullptr;
				}
				else {
					dataPtr = static_cast<WeakPtrDataType*>(other.dataPtr);
					controlBlockState = other.controlBlockState;

					switch (other.controlBlockState) {
					case impl::SharedPtrControlBlockState::seperate:
						controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphic;
						controlBlockSeperatePolymorphic = static_cast<control_block_seperate_polymorphic*>(other.controlBlockSeperate);
						break;
					case impl::SharedPtrControlBlockState::fused:
						controlBlockState = impl::SharedPtrControlBlockState::fusedPolymorphic;
						controlBlockFusedPolymorphic = static_cast<control_block_fused_polymorphic*>(other.controlBlockFused);
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphic:
						controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphic;
						controlBlockSeperatePolymorphic = other.controlBlockSeperatePolymorphic;
						break;
					case impl::SharedPtrControlBlockState::fusedPolymorphic:
						controlBlockState = impl::SharedPtrControlBlockState::fusedPolymorphic;
						controlBlockFusedPolymorphic = other.controlBlockFusedPolymorphic;
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
						if (isConstantEvaluated()) {
							controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr;
							controlBlockSeperatePolymorphicConstexpr = other.controlBlockSeperatePolymorphicConstexpr;
						} else {
							unreachable();
						}
						break;
					default:
						unreachable();
					}
				}

				other.dataPtr = nullptr;
			}
		public:

			constexpr WeakPtr(const WeakPtr& other) noexcept {
				constructCopy<WeakPtr>(other);
			}
			constexpr WeakPtr(WeakPtr&& other) noexcept {
				constructMove<WeakPtr>(forward<WeakPtr>(other));
			}

			template<class OtherWeakPtrDataType>
				requires(IsPolymorphicCastable<OtherWeakPtrDataType, WeakPtrDataType>)
			constexpr WeakPtr(const WeakPtr<OtherWeakPtrDataType>& other) noexcept {
				constructPolymorphicCopy<WeakPtr<OtherWeakPtrDataType>>(other);
			}
			template<class OtherWeakPtrDataType>
				requires(IsPolymorphicCastable<OtherWeakPtrDataType, WeakPtrDataType>)
			constexpr WeakPtr(WeakPtr<OtherWeakPtrDataType>&& other) noexcept {
				constructPolymorphicMove<WeakPtr<OtherWeakPtrDataType>>(forward<WeakPtr<OtherWeakPtrDataType>>(other));
			}

			constexpr WeakPtr(const SharedPtr<WeakPtrDataType>& other) noexcept {
				constructCopy<SharedPtr<WeakPtrDataType>>(other);
			}
			template<class OtherWeakPtrDataType>
				requires(IsPolymorphicCastable<OtherWeakPtrDataType, WeakPtrDataType>)
			constexpr WeakPtr(const SharedPtr<WeakPtrDataType>& other) noexcept {
				constructPolymorphicCopy<SharedPtr<OtherWeakPtrDataType>>(other);
			}
		private:
			constexpr void destruct() noexcept {
				if (dataPtr) {
					switch (controlBlockState) {
					case impl::SharedPtrControlBlockState::seperate:
						control_block_seperate::destoryWeak(controlBlockSeperate);
						break;
					case impl::SharedPtrControlBlockState::fused:
						control_block_fused::destoryWeak(controlBlockFused);
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphic:
						controlBlockSeperatePolymorphic->getWeakDestoryFunction()(controlBlockSeperatePolymorphic);
						break;
					case impl::SharedPtrControlBlockState::fusedPolymorphic:
						controlBlockFusedPolymorphic->getWeakDestoryFunction()(controlBlockFusedPolymorphic);
						break;
					case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
						if (isConstantEvaluated()) {
							controlBlockSeperatePolymorphicConstexpr->getWeakDestoryFunction()(controlBlockSeperatePolymorphicConstexpr);
						} else {
							unreachable();
						}
						break;
					default:
						unreachable();
					}
				}
			}
		public:
			//destructor
			constexpr ~WeakPtr() noexcept {
				destruct();
			}

			//util 
			constexpr WeakPtr& self() noexcept { return *this; }
			constexpr const WeakPtr& self() const noexcept { return *this; }


			//assignment
			constexpr WeakPtr& operator=(const WeakPtr& other) noexcept {
				destruct();
				constructCopy<WeakPtr>(other);
				return self();
			}
			constexpr WeakPtr& operator=(WeakPtr&& other) noexcept {
				destruct();
				constructMove<WeakPtr>(forward<WeakPtr>(other));
				return self();
			}

			template<class OtherWeakPtrDataType>
				requires(IsPolymorphicCastable<OtherWeakPtrDataType, WeakPtrDataType>)
			constexpr WeakPtr& operator=(const WeakPtr<OtherWeakPtrDataType>& other) noexcept {
				destruct();
				constructPolymorphicCopy<WeakPtr<OtherWeakPtrDataType>>(other);
				return self();
			}
			template<class OtherWeakPtrDataType>
				requires(IsPolymorphicCastable<OtherWeakPtrDataType, WeakPtrDataType>)
			constexpr WeakPtr& operator=(WeakPtr<OtherWeakPtrDataType>&& other) noexcept {
				destruct();
				constructPolymorphicMove<WeakPtr<OtherWeakPtrDataType>>(forward<WeakPtr<OtherWeakPtrDataType>>(other));
				return self();
			}

			constexpr WeakPtr& operator=(const SharedPtr<WeakPtrDataType>& other) noexcept {
				destruct();
				constructCopy<SharedPtr<WeakPtrDataType>>(other);
				return self();
			}
			template<class OtherWeakPtrDataType>
				requires(IsPolymorphicCastable<OtherWeakPtrDataType, WeakPtrDataType>)
			constexpr WeakPtr& operator=(const SharedPtr<WeakPtrDataType>& other) noexcept {
				destruct();
				constructPolymorphicCopy<SharedPtr<OtherWeakPtrDataType>>(other);
				return self();
			}

			//modifiers
			constexpr void reset() noexcept {
				destruct();
				dataPtr = nullptr;
				controlBlockState = impl::SharedPtrControlBlockState::seperate;
				controlBlockSeperate = nullptr;
			}

			constexpr void swap(WeakPtr& other) noexcept {
				impl::SharedPtrControlBlockState tempState = other.controlBlockState;
				other.controlBlockState = controlBlockState;
				controlBlockState = tempState;

				WeakPtrDataType* tempDataPtr = other.dataPtr;
				other.dataPtr = dataPtr;
				dataPtr = tempDataPtr;

				switch (controlBlockState) {
				case impl::SharedPtrControlBlockState::seperate: {
					control_block_seperate* controlBlockSeperateTemp = other.controlBlockSeperate;
					other.controlBlockSeperate = controlBlockSeperate;
					controlBlockSeperate = controlBlockSeperateTemp;
					break;
				}
				case impl::SharedPtrControlBlockState::fused: {
					control_block_fused* controlBlockFusedTemp = other.controlBlockFused;
					other.controlBlockFused = controlBlockFused;
					controlBlockFused = controlBlockFusedTemp;
					break;
				}
				case impl::SharedPtrControlBlockState::seperatePolymorphic: {
					control_block_seperate_polymorphic* controlBlockSeperatePolymorphicTemp = other.controlBlockSeperatePolymorphic;
					other.controlBlockSeperatePolymorphic = controlBlockSeperatePolymorphic;
					controlBlockSeperatePolymorphic = controlBlockSeperatePolymorphicTemp;
					break;
				}
				case impl::SharedPtrControlBlockState::fusedPolymorphic: {
					control_block_fused_polymorphic* controlBlockFusedPolymorphicTemp = other.controlBlockFusedPolymorphic;
					other.controlBlockFusedPolymorphic = controlBlockFusedPolymorphic;
					controlBlockFusedPolymorphic = controlBlockFusedPolymorphicTemp;
					break;
				}
				case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr: {
					if (isConstantEvaluated()) {
						control_block_seperate_polymorphic_constexpr* controlBlockSeperatePolymorphicConstexprTemp = other.controlBlockSeperatePolymorphicConstexpr;
						other.controlBlockSeperatePolymorphicConstexpr = controlBlockSeperatePolymorphicConstexpr;
						controlBlockSeperatePolymorphicConstexpr = controlBlockSeperatePolymorphicConstexprTemp;
					} else {
						unreachable();
					}
					break;
				}
				default:
					unreachable();
				}
			}

			//observers
			constexpr Size use_count() const noexcept {
				if (dataPtr) {
					switch (controlBlockState) {
					case impl::SharedPtrControlBlockState::seperate:
						return controlBlockSeperate->useCount.load();
					case impl::SharedPtrControlBlockState::fused:
						return controlBlockFused->useCount.load();
					case impl::SharedPtrControlBlockState::seperatePolymorphic:
						return controlBlockSeperatePolymorphic->getUseCount(controlBlockSeperatePolymorphic);
					case impl::SharedPtrControlBlockState::fusedPolymorphic:
						return controlBlockFusedPolymorphic->getUseCount(controlBlockFusedPolymorphic);
					case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
						if (isConstantEvaluated()) {
							return controlBlockSeperatePolymorphicConstexpr->getUseCountFunction()(controlBlockSeperatePolymorphicConstexpr);
						} else {
							unreachable();
						}
					default:
						unreachable();
					}
				}
				return 0;
			}

			constexpr bool expired() const noexcept {
				return use_count() == 0;
			}
			constexpr SharedPtr lock() const noexcept {
				return expired() ? SharedPtr() : SharedPtr(self());
			}

			constexpr bool empty() const noexcept { return dataPtr == nullptr; }
			constexpr bool isEmpty() const noexcept { return empty(); }
			constexpr bool isNotEmpty() const noexcept { return !empty(); }
			explicit constexpr operator bool() const noexcept { return isNotEmpty(); }

			friend SharedPtr;
		}; 

		using weak_type = WeakPtr<DataType>;


	private:
		template<class OtherType, bool IncrementRefCount = true>
		constexpr void constructCopy(const OtherType& other) noexcept {
			if (other.dataPtr == nullptr) {
				dataPtr = nullptr;
				controlBlockState = impl::SharedPtrControlBlockState::seperate;
				controlBlockSeperate = nullptr;
			} else {
				dataPtr = other.dataPtr;
				controlBlockState = other.controlBlockState;

				switch (other.controlBlockState) {
				case impl::SharedPtrControlBlockState::seperate:
					controlBlockSeperate = other.controlBlockSeperate;
					if constexpr (IncrementRefCount) {
						controlBlockSeperate->useCount++;
					}
					break;
				case impl::SharedPtrControlBlockState::fused:
					controlBlockFused = other.controlBlockFused;
					if constexpr (IncrementRefCount) {
						controlBlockFused->useCount++;
					}
					break;
				case impl::SharedPtrControlBlockState::seperatePolymorphic:
					controlBlockSeperatePolymorphic = other.controlBlockSeperatePolymorphic;
					if constexpr (IncrementRefCount) {
						controlBlockSeperatePolymorphic->refIncrement(controlBlockSeperatePolymorphic);
					}
					break;
				case impl::SharedPtrControlBlockState::fusedPolymorphic:
					controlBlockFusedPolymorphic = other.controlBlockFusedPolymorphic;
					if constexpr (IncrementRefCount) {
						controlBlockFusedPolymorphic->refIncrement(controlBlockFusedPolymorphic);
					}
					break;
				case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
					if (isConstantEvaluated()) {
						controlBlockSeperatePolymorphicConstexpr = other.controlBlockSeperatePolymorphicConstexpr;
						if constexpr (IncrementRefCount) {
							controlBlockSeperatePolymorphicConstexpr->getRefIncrementFunction()(controlBlockSeperatePolymorphicConstexpr);
						}
					} else {
						unreachable();
					}
					break;
				default:
					unreachable();
				}
			}
		}
		template<class OtherType>
		constexpr void constructMove(OtherType&& other) noexcept {
			if (other.dataPtr == nullptr) {
				dataPtr = nullptr;
				controlBlockState = impl::SharedPtrControlBlockState::seperate;
				controlBlockSeperate = nullptr;
			} else {
				dataPtr = other.dataPtr;
				controlBlockState = other.controlBlockState;

				switch (other.controlBlockState) {
				case impl::SharedPtrControlBlockState::seperate:
					controlBlockSeperate = other.controlBlockSeperate;
					break;
				case impl::SharedPtrControlBlockState::fused:
					controlBlockFused = other.controlBlockFused;
					break;
				case impl::SharedPtrControlBlockState::seperatePolymorphic:
					controlBlockSeperatePolymorphic = other.controlBlockSeperatePolymorphic;
					break;
				case impl::SharedPtrControlBlockState::fusedPolymorphic:
					controlBlockFusedPolymorphic = other.controlBlockFusedPolymorphic;
					break;
				case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
					if (isConstantEvaluated()) {
						controlBlockSeperatePolymorphicConstexpr = other.controlBlockSeperatePolymorphicConstexpr;
					} else {
						unreachable();
					}
					break;
				default:
					unreachable();
				}
			}

			other.dataPtr = nullptr;
		}
		template<class OtherType, bool IncrementRefCount = true>
		constexpr void constructPolymorphicCopy(const OtherType& other) noexcept {
			if (other.dataPtr == nullptr) {
				dataPtr = nullptr;
				controlBlockState = impl::SharedPtrControlBlockState::seperate;
				controlBlockSeperate = nullptr;
			} else {
				dataPtr = static_cast<DataType*>(other.dataPtr);
				controlBlockState = other.controlBlockState;

				switch (other.controlBlockState) {
				case impl::SharedPtrControlBlockState::seperate:
					controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphic;
					controlBlockSeperatePolymorphic = static_cast<control_block_seperate_polymorphic*>(other.controlBlockSeperate);
					if constexpr (IncrementRefCount) {
						controlBlockSeperatePolymorphic->refIncrement(controlBlockSeperatePolymorphic);
					}
					break;
				case impl::SharedPtrControlBlockState::fused:
					controlBlockState = impl::SharedPtrControlBlockState::fusedPolymorphic;
					controlBlockFusedPolymorphic = static_cast<control_block_fused_polymorphic*>(other.controlBlockFused);
					if constexpr (IncrementRefCount) {
						controlBlockFusedPolymorphic->refIncrement(controlBlockFusedPolymorphic);
					}
					break;
				case impl::SharedPtrControlBlockState::seperatePolymorphic:
					controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphic;
					controlBlockSeperatePolymorphic = other.controlBlockSeperatePolymorphic;
					if constexpr (IncrementRefCount) {
						controlBlockSeperatePolymorphic->refIncrement(controlBlockSeperatePolymorphic);
					}
					break;
				case impl::SharedPtrControlBlockState::fusedPolymorphic:
					controlBlockState = impl::SharedPtrControlBlockState::fusedPolymorphic;
					controlBlockFusedPolymorphic = other.controlBlockFusedPolymorphic;
					if constexpr (IncrementRefCount) {
						controlBlockFusedPolymorphic->refIncrement(controlBlockFusedPolymorphic);
					}
					break;
				case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
					if (isConstantEvaluated()) {
						controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr;
						controlBlockSeperatePolymorphicConstexpr = other.controlBlockSeperatePolymorphicConstexpr;
						if constexpr (IncrementRefCount) {
							controlBlockSeperatePolymorphicConstexpr->getRefIncrementFunction()(controlBlockSeperatePolymorphicConstexpr);
						}
					} else {
						unreachable();
					}
					break;
				default:
					unreachable();
				}
			}
		}
		template<class OtherType>
		constexpr void constructPolymorphicMove(const OtherType& other) noexcept {
			if (other.dataPtr == nullptr) {
				dataPtr = nullptr;
				controlBlockState = impl::SharedPtrControlBlockState::seperate;
				controlBlockSeperate = nullptr;
			} else {
				dataPtr = static_cast<DataType*>(other.dataPtr);
				controlBlockState = other.controlBlockState;

				switch (other.controlBlockState) {
				case impl::SharedPtrControlBlockState::seperate:
					controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphic;
					controlBlockSeperatePolymorphic = static_cast<control_block_seperate_polymorphic*>(other.controlBlockSeperate);
					break;
				case impl::SharedPtrControlBlockState::fused:
					controlBlockState = impl::SharedPtrControlBlockState::fusedPolymorphic;
					controlBlockFusedPolymorphic = static_cast<control_block_fused_polymorphic*>(other.controlBlockFused);
					break;
				case impl::SharedPtrControlBlockState::seperatePolymorphic:
					controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphic;
					controlBlockSeperatePolymorphic = other.controlBlockSeperatePolymorphic;
					break;
				case impl::SharedPtrControlBlockState::fusedPolymorphic:
					controlBlockState = impl::SharedPtrControlBlockState::fusedPolymorphic;
					controlBlockFusedPolymorphic = other.controlBlockFusedPolymorphic;
					break;
				case impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr:
					if (isConstantEvaluated()) {
						controlBlockState = impl::SharedPtrControlBlockState::seperatePolymorphicConstexpr;
						controlBlockSeperatePolymorphicConstexpr = other.controlBlockSeperatePolymorphicConstexpr;
					} else {
						unreachable();
					}
					break;
				default:
					unreachable();
				}
			}

			other.dataPtr = nullptr;
		}