			constexpr const_path_view_type rootName() const noexcept {
				if constexpr (getPlatformType() == ProgramPlatformType::windowsPlatform) {
					if (pathStringView.size() < 2) { return {}; }
					if (internalHasRootName()) {
						return const_path_view_type(pathStringView.substr(0, 2));
					}
					return {};
				} else {
					return {};
				}
			}

			constexpr const_path_view_type rootDirectory() const noexcept {
				if constexpr (getPlatformType() == ProgramPlatformType::windowsPlatform) {
					if (pathStringView.size() < 1) { return {}; }
					if (isPlatformPathSeparator(pathStringView[0])) {
						return const_path_view_type(pathStringView.substr(0, 1));
					}
					if (pathStringView.size() < 3) { return {}; }
					if (isPlatformPathSeparator(pathStringView[2])) {
						return const_path_view_type(pathStringView.substr(2, 1));
					}
					return {};
				} else {
					if (pathStringView.size() < 1) { return {}; }
					if (isPlatformPathSeparator(pathStringView[1])) {
						return const_path_view_type(pathStringView.substr(0, 1));
					}
					return {};
				}
			}

			constexpr const_path_view_type rootPath() const noexcept {
				if constexpr (getPlatformType() == ProgramPlatformType::windowsPlatform) {
					if (pathStringView.size() < 1) { return {}; }
					if (isPlatformPathSeparator(pathStringView[0])) {
						return const_path_view_type(pathStringView.substr(0, 1));
					}

					if (pathStringView.size() < 3) { return {}; }
					if (internalHasRootName() && isPlatformPathSeparator(pathStringView[2])) {
						return const_path_view_type(pathStringView.substr(0, 3));
					}
					return {};
				} else {
					return rootDirectory();
				}
			}

			constexpr const_path_view_type relativePath() const noexcept {
				if constexpr (getPlatformType() == ProgramPlatformType::windowsPlatform) {
					if (pathStringView.size() < 2) { return {}; }
					if (isPlatformPathSeparator(pathStringView[0])) {
						return const_path_view_type(pathStringView.substr(1));
					}
					if (pathStringView.size() < 4) { return {}; }
					if (isPlatformPathSeparator(pathStringView[2])) {
						return const_path_view_type(pathStringView.substr(3));
					}
					return pathStringView;
				} else {
					if (pathStringView.size() < 2) { return {}; }
					if (isPlatformPathSeparator(pathStringView[1])) {
						return const_path_view_type(pathStringView.substr(1));
					}
					return pathStringView;
				}
			}

			constexpr const_path_view_type parentPath() const noexcept {
				if (isEmpty()) { return{}; }
				const_path_view_type filenamePathView = filename();
				return const_path_view_type(pathStringView.substr(pathStringView.size() - filenamePathView.size()));
			}

			constexpr const_path_view_type filename() const noexcept {
				if (isEmpty()) { return{}; }

				size_type filenameSize = 0;
				for (const Assci& character : makeReverseIteration(pathStringView)) {
					filenameSize++;
					if (isPlatformPathSeparator(character)) {
						break;
					}
				}

				return const_path_view_type(pathStringView.substr(pathStringView.size() - filenameSize));
			}

			constexpr const_path_view_type stem() const noexcept {
				if (isEmpty()) { return{}; }

				const size_type extensionSize = 0;
				for (const Assci& character : makeReverseIteration(pathStringView)) {
					extensionSize++;
					if (character == '.') {
						break;
					}

					if (isPlatformPathSeparator(character)) {
						return const_path_view_type(pathStringView.substr(pathStringView.size() - extensionSize));
					}
				}

				if (extensionSize == size()) { return{}; }
				const_reverse_iterator stemIter = rbegin() + extensionSize + 1;
				if (isPlatformPathSeparator(*stemIter)) {
					return const_path_view_type(pathStringView.substr(pathStringView.size() - extensionSize));
				}

				const size_type stemSize = 0;
				for (; stemIter < rend(); ++stemIter) {
					stemSize++;
					if (isPlatformPathSeparator(*stemIter)) {
						return const_path_view_type(pathStringView.substr(pathStringView.size() - (extensionSize + stemSize), stemSize));
					}
				}

				return {};
			}

			constexpr const_path_view_type extension() const noexcept {
				const size_type extensionSize = 0;
				for (const Assci& character : makeReverseIteration(pathStringView)) {
					extensionSize++;
					if (character == '.') {
						return const_path_view_type(pathStringView.substr(pathStringView.size() - extensionSize));
					}
					if (isPlatformPathSeparator(character)) {
						return {};
					}
				}
				return {};
			}